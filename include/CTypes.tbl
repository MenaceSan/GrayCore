//
//! @file cTypes.tbl
//! @copyright 1992 - 2020 Dennis Robinson (http://www.menasoft.com)
//! list all built-in / intrinsic / primitive 'C' types. CTYPE_FLAG_Numeric|
//! bool, char, int, float, double, _int64. (short, long, signed, unsigned)
//! @note char != signed or unsigned char according to M$ ??
//! @note long and int may really be the same but not for linking purposes.
//! http://jk-technology.com/c/inttypes.html
//! @note order is important here for variant type enum.

CTYPE_DEF(Bool,		bool,				CTYPE_FLAG_Numeric,							"1",	false, true,		UINT,	"only value of first bit is used. not same as _WIN32 BOOL")

CTYPE_DEF(Char,		char,				CTYPE_FLAG_Numeric|CTYPE_FLAG_NumSigned,	"1",	(-127 - 1), 127,	int,	"char (ASSUME same as signed char?)")	// _I8_MIN, _I8_MAX
// omit 'signed char'
CTYPE_DEF(Byte,		unsigned char,		CTYPE_FLAG_Numeric,							"01",	0, 0xFF,			UINT,	"BYTE 1 byte. VT_UI1")

#ifdef _NATIVE_WCHAR_T_DEFINED	// If compiler says wchar_t is a special/unique type
CTYPE_DEF(WChar,	wchar_t,			CTYPE_FLAG_Numeric,							"01",	0, 0xFFFF,			UINT,	"Wide char is special type. WORD 16 bit. 2 bytes")
#endif

// char16_t   // C++11 feature
// char32_t   // C++11 feature

CTYPE_DEF(Short,	signed short,		CTYPE_FLAG_Numeric|CTYPE_FLAG_NumSigned,	"1",	(-32767 - 1), 32767,	int,	"16 bit signed")
CTYPE_DEF(Word,		unsigned short,		CTYPE_FLAG_Numeric,							"01",	0, 0xFFFF,				UINT,	"WORD 16 bit. 2 bytes VT_UI2")	// _UI16_MAX

CTYPE_DEF(Int32,	int,				CTYPE_FLAG_Numeric|CTYPE_FLAG_NumSigned,	"1",	(-2147483647 - 1), 2147483647,	int,	"signed 32 bit int. VT_INT, (ASSUME same as signed int)")
CTYPE_DEF(DWord,	unsigned int,		CTYPE_FLAG_Numeric,							"01",	0, 0xffffffffU,					UINT,	"4 bytes. VT_UI4, UINT32")

#ifdef USE_FLOAT
CTYPE_DEF(Float,	float,				CTYPE_FLAG_Numeric|CTYPE_FLAG_Float|CTYPE_FLAG_NumSigned,	"1.23f",	(-3.402823466e+38F), (3.402823466e+38F),				double, "32 bit float")
CTYPE_DEF(Double,	double,				CTYPE_FLAG_Numeric|CTYPE_FLAG_Float|CTYPE_FLAG_NumSigned,	"1.2345",	(-1.7976931348623157e+308), (1.7976931348623157e+308),	double, "64 bit float") //*8?
#endif

#ifdef USE_INT64
// Native 64 bit type support. May not be 64 bit code. not the same as USE_64BIT
CTYPE_DEF(Int64,	INT64,				CTYPE_FLAG_Numeric|CTYPE_FLAG_NumSigned,	"1",	(-9223372036854775807LL - 1), 9223372036854775807LL,	INT64,	"signed 64 bit INT64 (same as long long)")	// _I64_MAX
CTYPE_DEF(QWord,	UINT64,				CTYPE_FLAG_Numeric,							"01",	0, 0xffffffffffffffffULL,								UINT64,	"8 bytes. VT_UI8, UINT64 (same as unsigned long long)")	// _UI64_MAX
#endif

#ifndef USE_LONG_AS_INT64
// Ambiguous/duplicated types. __GNUC__ defines __int64_t (INT64) as 'signed long int'
CTYPE_DEF(Long,		long,				CTYPE_FLAG_Numeric|CTYPE_FLAG_NumSigned,	"1",	(-2147483647 - 1), 2147483647,		Long,	"LONG (ASSUME same as signed long)")
CTYPE_DEF(ULong,	unsigned long,		CTYPE_FLAG_Numeric,							"01",	0, 0xffffffffU,						ULong,	"ULONG")
#endif

// long double, not supported in M$
